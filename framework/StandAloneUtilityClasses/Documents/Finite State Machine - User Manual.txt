
									Finite State Machine
									User Manual
									Version 0.5 - 03 10 2017

									
1] Introduction

	Finite State Machine is not proposed as a module but as a set of classes in the following files from StandAloneUtilityClasses :
	
	Headers
		FSM.h
		FSM_EventQueue.h
		FSM_State.h
		FSM_StateStruct.h
		
	Sources
		FSM.cpp
		FSM_State.cpp
		FSM_StateStruct.cpp
		
	You have to add those files to your project first. Then somewhere in your application code, include FSM.h file
	
	#include "FSM.h"
	
	and probably at init or in the constructor of your application call :
	
	// declare classes and manager, and init manager singleton
	Init_FSM_Management();
	
2] C++ syntax

m_currentFSM = (FSM*)KigsCore::GetInstanceOf("currentFSM", _S_2_ID("FSM"));

// start init FSM
m_currentFSM->beginStateMap();

// start init state "IDLE"
m_currentFSM->beginStateDescription("IDLE");
// start transition map for "IDLE"
m_currentFSM->beginTransitionMap();
// add one transition on event "Start" to state "RUNNING"
m_currentFSM->addTransition("Start", "RUNNING");
// transition map is done
m_currentFSM->endTransitionMap();
// "IDLE" state is done 
m_currentFSM->endStateDescription();

// second state "RUNNING"
m_currentFSM->beginStateDescription("RUNNING");
// attach update action
m_currentFSM->addStateAction(STATE_ACTION_TYPE::Update, "brr");
// attach end action
m_currentFSM->addStateAction(STATE_ACTION_TYPE::End, "zzzz");
m_currentFSM->beginTransitionMap();
m_currentFSM->addTransition("Stop", "STOPPED");
m_currentFSM->endTransitionMap();
m_currentFSM->endStateDescription();

// third state STOPPED
m_currentFSM->beginStateDescription("STOPPED");
m_currentFSM->beginTransitionMap();
m_currentFSM->addTransition("Start", "RUNNING");
m_currentFSM->endTransitionMap();
m_currentFSM->endStateDescription();

// end of fsm descrition
m_currentFSM->endStateMap();

// set start state to "IDLE"
m_currentFSM->setValue(LABEL_TO_ID(InitState),"IDLE");

m_currentFSM->Init(); 

it's also possible to add a son state directly : 

m_currentFSM->addStateInstance(otherState);

3] XML syntax

in XML file the FSM can be given as a json data 

<?xml version="1.0"?>
<Inst N="currentFSM" T="FSM">
	<Attr T="coreitem" N="Description">
		<![CDATA[
		{
		"StateMap":{
		"IDLE" : {
			"transitions" : 
			{
				"Start" : ["RUNNING"]
			}
		},
		"RUNNING" : {
			"actions" : ["brr","","zzzz"],
			"transitions" : 
			{
				"Stop" : ["STOPPED"]
			}
		},
		"STOPPED" : {
			"transitions" : 
			{
				"Start" : ["RUNNING"]
			}
		}
		}
		}
		]]>
	</Attr>
	<Attr T="uint" N="InitState" V="IDLE"/>
</Inst>

A son FSM_State can also be described recursively :

<?xml version="1.0"?>
<Inst N="currentFSM" T="FSM">
	<Attr T="coreitem" N="Description">
		<![CDATA[
		{
		"StateMap":{
		"IDLE" : {
			"transitions" : 
			{
				"Start" : ["RUNNING"]
			}
		},
		"RUNNING" : {
			"actions" : ["brr","","zzzz"],
			"transitions" : 
			{
				"Stop" : ["STOPPED"]
			}
		},
		"STOPPED" : {
			
			"instance" : { "infos" : ["FSM_State","STOPPED_FSM","SUBSTOPPED1"],

					"StateMap":{
					
					"SUBSTOPPED1" : 
					{
						"actions" : ["","prrt",""],
						"transitions" : 
						{
							"Start" : ["RUNNING"],
							"Stop" : ["SUBSTOPPED2"]
						}
					},
					"SUBSTOPPED2" : 
					{
						"actions" : ["","blb",""],
						"transitions" : 
						{
							"Start" : ["RUNNING"],
							"Stop" : ["SUBSTOPPED1"]
						}
					}
				}
			}
		}
		}
		}
		]]>
	</Attr>
	<Attr T="uint" N="InitState" V="IDLE"/>
</Inst>

Or imported from an external xml : 


<?xml version="1.0"?>
<Inst N="currentFSM" T="FSM">
	<Attr T="coreitem" N="Description">
		<![CDATA[
		{
		"StateMap":{
		"IDLE" : {
			"transitions" : 
			{
				"Start" : ["RUNNING"]
			}
		},
		"RUNNING" : {
			"actions" : ["brr","","zzzz"],
			"transitions" : 
			{
				"Stop" : ["STOPPED"]
			}
		},
		"STOPPED" : {
			
			"importXML" : "FSMState.xml"
		}
		}
		}
		]]>
	</Attr>
	<Attr T="uint" N="InitState" V="IDLE"/>
	
</Inst>

Or imported from an external JSON : 

<?xml version="1.0"?>
<Inst N="currentFSM" T="FSM">
	<Attr T="coreitem" N="Description">
		<![CDATA[
		{
		"StateMap":{
		"IDLE" : {
			"transitions" : 
			{
				"Start" : ["RUNNING"]
			}
		},
		"RUNNING" : {
			"actions" : ["brr","","zzzz"],
			"transitions" : 
			{
				"Stop" : ["STOPPED"]
			}
		},
		"STOPPED" : {
			
			"importJSON" : "FSMState.json"
		}
		}
		}
		]]>
	</Attr>
	<Attr T="uint" N="InitState" V="IDLE"/>
	
</Inst>

Or described as a classic instance and reference :

<?xml version="1.0"?>
<Inst N="currentFSM" T="FSM">
	<Attr T="coreitem" N="Description">
<![CDATA[
{
"StateMap":{
"IDLE" : {
	"transitions" : 
	{
		"Start" : ["RUNNING"]
	}
},
"RUNNING" : {
	"actions" : ["brr","","zzzz"],
	"transitions" : 
	{
		"Stop" : ["STOPPED"]
	}
},
"STOPPED" : {
	
	"reference" : "STOPPED_FSM"
}
}
}
]]>
	</Attr>
	<Attr T="uint" N="InitState" V="IDLE"/>
	
	<Inst N="STOPPED_FSM" T="FSM_State">
		<Attr T="coreitem" N="Description">
		<![CDATA[
		{
			"StateMap":{
			
			"SUBSTOPPED1" : 
			{
				"actions" : ["","prrt",""],
				"transitions" : 
				{
					"Start" : ["RUNNING"],
					"Stop" : ["SUBSTOPPED2"]
				}
			},
			"SUBSTOPPED2" : 
			{
				"actions" : ["","blb",""],
				"transitions" : 
				{
					"Start" : ["RUNNING"],
					"Stop" : ["SUBSTOPPED1"]
				}
			}
		}
		}
		]]>
		</Attr>
		<Attr T="uint" N="InitState" V="SUBSTOPPED1"/>
	</Inst>
	
</Inst>


	