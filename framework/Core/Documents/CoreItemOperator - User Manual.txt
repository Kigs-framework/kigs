
									CoreItemOperator 
									User Manual
									Version 0.8 - 05 26 2015
									Version 0.9 - 05 27 2015
									Version 1.0 - 06 09 2015
									Version 1.5 - 01 31 2016

									
1] Introduction

	A CoreItemOperator is a special CoreItem representing a mathematical function or operation : + - * /
	V0.8 ==> available function are sin, cos, tan, abs
	V0.9 ==> added min and max function
	V1.0 ==> added some logical operator and a "if then else" operator
	V1.5 ==> added CoreModifiable method calling, affectation operator and instruction list
	
	you can init a maCoreItem using this syntax : 
	
	// init in .h of an object
	maCoreItem myFunction; 
	
	myFunction="eval(12.0*sin(#Opacity#))";
	
	a hierarchy of CoreItemOperator is created and attached to this maCoreItem, then when doing : 
	
	kfloat result= myFunction;
	
	or by calling getValue(result), the function is evaluated and the result is returned.
	
	
2] syntax

	- You can use + - * / operators and parenthesis "the classical way" : (12.0*5+(32*4.5 - 10.0))/3 
	Of course, there is no optimisation so you should better optimize constant yourself for performance reason.

	- You can also use sin / cos / tan / abs the classical way : sin(2.1)*cos(0.3) 
	trigonometric functions take radian parameters
	
	- You can access CoreModifiableAttributes values with their name between # character : sin(#posX#) #posX# retrieve the value of the parameter each time the function is evaluated. 
	#posX# retrieve the value of the parameter posX for the instance owning myFunction. 
	
	V0.9 ==> For array value (Point2D, Point3D, Quaternion...) you can access the component you want using
	".x" ".y" ".z" or ".w" following the value name : #Dock.x#

	- You can also retrieve a parameter value in the instance hierarchy : #instanceName->posX# retrieve the value of parameter posX for the instance named "instanceName" son of the instance owning myFunction.    
	
	- A "global path" can also be used starting with a "/" character :  sin(#/theScenegraphModule/theScene/node1->Opacity#).
	
	- You can also go to parent instances using ".." : #../instance2->posX# retrieve posX parameter on "sister" instance called instance2.
	
	V0.9 ==> added min and max function, you can add as many parameters as you need, separated by ',' characters : max(0.0,sin(#time"),cos(#time#))
	
	V1.0 ==> logical and if operator :
	- Logical operator return 0 or 1 values : (13>12) returns 1 (13<12) returns 0 
	- Available logical operators are < > <= >= == != && ||
	- if method gets 3 parameters : first is the test, second is the "then" result, third is the "else" result : if(13>12,8,16) => returns 8 
	  if((13==12)||(10<5),8,16) => returns 16
	  
	 V1.5 ==>
	 - You can call a method on a CoreModifiable using [] block : [../norm_hist->AverageValueForhigherPercent(1.0)]*3.0 : call the method "AverageValueForhigherPercent" on the object norm_dist, with parameter 1.0 and multiply result by 3. 
     - You can set a value using "=" operator : #Dock.x#=(#Dock.x#+1.0) will increment Dock.x value
	 - You can evaluate several expressions and return the last one : #Dock.x#=(#Dock.x#+1.0);sin(#Dock.x#) will increment Dock.x value and return sin(Dock.x) value
      	 