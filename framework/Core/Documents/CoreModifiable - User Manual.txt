
									CoreModifiable
									User Manual
									Version 1.0 - 02 17 2017
									Version 1.1 - 02 19 2017
									Version 1.2 - 05 17 2017

									
1] Introduction

	CoreModifiable is the base class of all the managed class in the framework. CoreModifiable instances are reference counted and can be organised as a tree. They can be serialized (import / export) as xml files. You can access (read/write) attributes ( see "CoreModifiableAttribute - User Manual.txt" ) by their names as string, and you can call specific method by their name as string. CoreModifiable instances are generaly created by the Core instance factory. All created instances are references so you can find a specific instance by its name and/or type or its relative position in instance trees.
	
2] C++ syntax

2.1) instances management

	You generally create an instance using the instance factory :
	
	CoreModifiable*	newtexture = KigsCore::GetInstanceOf("newtexture", _S_2_ID("Texture"));
	
	first parameter is the name of the instance, second parameter is the type. 
	
	After creation, instance has a reference count of 1. So if you call :
	
	newtexture->Destroy();
	
	this instance will be deleted.
	
	You can add an instance to another instance :
	
	newmaterial->addItem(newtexture); // increment newtexture reference count
	
	or remove an instance from another
	
	newmaterial->removeItem(newtexture); // decrement newtexture reference count

	a more complete sample code :
	
	CoreModifiable*	newmaterial = KigsCore::GetInstanceOf("newmaterial", _S_2_ID("Material"));
	CoreModifiable*	newtexture = KigsCore::GetInstanceOf("newtexture", _S_2_ID("Texture")); // newtexture ref count = 1
	newmaterial->addItem(newtexture); // newtexture ref count = 2
	newtexture->Destroy();	// newtexture ref count = 1 => newtexture is now managed by its parent
	
	...
	
	newmaterial->Destroy(); // => ref count is 0 so call removeItem on all sons and delete newmaterial => newtexture is also destroyed

	WARNING : if you want to remove newtexture from newmaterial and add it to second material :
	newmaterial->removeItem(newtexture); // if newmaterial is the only newtexture's parent, newtexture will be deleted
	secondmaterial->addItem(newtexture); // crash here because newtexture was freed 
	
	Solution : 
	newtexture->GetRef();	// increment ref count
	newmaterial->removeItem(newtexture); // remove is safe 
	secondmaterial->addItem(newtexture); // newtexture have a ref count of 2 at least here
	newtexture->Destroy();	// decrement ref count again
	
2.2) attributes

	you can access coremodifiable attributes on an instance using following methods :
	
	int texture_width=0;
	newtexture->getValue(LABEL_TO_ID(Width), texture_width)); // get the value of attribute named "Width"
	
	int newpos[2] ={0};
	current->getArrayValue(LABEL_TO_ID(Position),newpos,2); // get 2 first value of array attribute named "Position"
	
	newtexture->setValue(LABEL_TO_ID(Width), 512)); // set the value of attribute named "Width"
	
	int newpos[2] ={50,50};
	current->setArrayValue(LABEL_TO_ID(Position),newpos,2); // set 2 first value of array attribute named "Position" with content of newpos array
	current->setValue(LABEL_TO_ID(Position),"{50,50}"); // same as setArrayValue
	
	For more on attributes see "CoreModifiableAttribute - User Manual.txt".

2.3) Methods

	you can create some accessible methods on classes :
	in class declaration (.h) :
	
	DECLARE_METHOD(FreeBuffers);


	in class Constructor
	CONSTRUCT_METHOD(FrameBufferStream, FreeBuffers); 
	
	in class definition (.cpp)
	
	DEFINE_METHOD(FrameBufferStream, FreeBuffers)
	{
		myBufferState[0] = FreeBuffer;
		myBufferState[1] = FreeBuffer;
		myBufferState[2] = FreeBuffer;
		return false;
	}

	Alternatively you can wrap an existing method like this (requires modern cpp compiler)
	in .h
	int myMethod(double a, const kstl::string& str);
	WRAP_METHOD(myMethod)

	

	
	then you can call the method even if you don't know the exact type of  framebufferstream instance
	framebufferstream->CallMethod(LABEL_TO_ID(FreeBuffers), this);
	
	CallMethod has 2 main prototypes :
	
	// call method with a list of parameters (in a vector)
	virtual bool CallMethod(const kstl::string methodName,kstl::vector<CoreModifiableAttribute*>& params,void* privateParams=0,CoreModifiable* sender=0);
	// call method with an instance used to create the list of parameters
	virtual bool CallMethod(const kstl::string methodName,CoreModifiable* params,void* privateParams=0,CoreModifiable* sender=0)

	you can also call using unsigned int id (with LABEL_TO_ID macro)
	
	virtual bool CallMethod(unsigned int methodNameID,kstl::vector<CoreModifiableAttribute*>& params,void* privateParams=0,CoreModifiable* sender=0);
	virtual bool CallMethod(unsigned int methodNameID,CoreModifiable* params,void* privateParams=0,CoreModifiable* sender=0)

	params can be easily unpacked into regular variables :

	int arg1;
	kstl::string arg2;
	Unpack(params, arg1, arg2);

	you can return values from a method using the syntax :

	DEFINE_METHOD(KeyboardDevice, getKey)
	{
		int id;
		Unpack(params, id);
		PUSH_RETURN_VALUE(getKeyState(id).GetValue(int));
		return false;
	}

	return values are added at the end of the params array. They are owned by the sender if it is not null or by this otherwise


	
	
2.3) Aggregate

	you can aggregate instances so that they will share attributes and method
	
	let suppose audioInstance is an instance of a class with a Volume attribute and a Play method. 
	
	// add an audio behavior to this instance of texture
	newtexture->aggregateWith(audioInstance);
	
	// now we can set Volume directly on newtexture instance :
    newtexture->setValue(LABEL_TO_ID(Volume),32);
	
	// or call play directly on newtexture :
	newtexture->CallMethod(LABEL_TO_ID(Play),this);
	
=> v1.1	
	audioInstance->setValue(LABEL_TO_ID(Width),128); // texture is in the same aggregate as audioInstance so set texture Width attribute   
<= v1.1 
	
	a call to the base CoreModifiable Update method of an aggregate root will call all instances in aggregate Update.

=> v1.1	

	if you want to be sure to update all instances of an aggregate you have to call update on root. getAggregateRoot called on any instance of an aggregate returns a pointer on the aggregate root 
	CoreModifiable* aroot=audioInstance->getAggregateRoot(); //returns the aggregate root, here newtexture
	aroot->Update(timer,0);// Update all instances of the aggregate 
	
	if you want to test and get an instance of some type in an aggregate, you can use aggregate_cast :
	
	Texture* aggregateTexture=aggregate_cast<Texture>(audioInstance); // if audioInstance belongs to an aggregate containing a Texture instance, returns a pointer on texture, else return 0.
	if(aggregateTexture)
	{
		// do something on texture
	}
	
<= v1.1
	

3] XML syntax

	// instances are exported or imported in xml like this

	<Instance Name="InstanceName" Type="InstanceType">
		<CoreModifiableAttribute Type="float" Name="AttributeName" Value="12" Dynamic="false"/>
		<Inst N="InstanceName" T="InstanceType" Aggregate="true">
			<Attr N="AttributeName" V="12"/>
		</Inst>
	</Instance>
	
=> v1.2

   Registering an object to the touch event manager is done like this :
   
   <Inst N="Start" T="UIButtonImage">   
		<REvent M="ManageDirectTouchEvent" E="DirectTouch" />
   </Inst>

   Verbose syntax is :
   
	   <RegisterTouchEvent Method="ManageDirectTouchEvent" Event="DirectTouch" />
	   
	Attribute "Method" is the name of the method called to manage the event on the given CoreModifiable
	
	Attribute "Event" is the event type in : {"Click","Swipe","Pinch","Scroll","DragAndDrop","DirectTouch"} or you can give directly the event ID integer in 0-20 : Click = 0, ... DirectTouch=5, 6 - 20 = user defined event
	
	An optionnal Attribute "Flag" or "F" in short syntax can also be used (unsigned int).

<= v1.2 
	
	// TODO : add more on xml format (includes, references...)