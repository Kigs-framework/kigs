
									CoreModifiableAttribute 
									User Manual
									Version 1.0 - 03 17 2016
									Version 1.1 - 04 07 2016
									Version 1.2 - 08 02 2016

									
1] Introduction

	A CoreModifiableAttribute is an attribute attached to a CoreModifiable.
	
	In code, CoreModifiableAttribute are exposed using getValue et setValue or getArrayValue / setArrayValue. They are typed attributes and can be serialized to XML.
	CoreModifiableAttribute can be a member of a CoreModifiable instance (define at compile time) or attached at runtime. Runtime attribute are called dynamic.
	
	C++ ATTRIBUTE_TYPE enum					|	C++ class type					|		xml attribute type				| 
	---------------------------------------------------------------------------------------------------------------------
	BOOL									|   maBool							|  bool									| 
	CHAR									|   maChar							|  char									| 
	SHORT									|   maShort							|  short								| 
	INT										|   maInt							|  int									| 
	LONG									|   maLong							|  long									| 
	UCHAR									|   maUChar							|  uchar								| 
	USHORT									|   maUShort						|  ushort								| 
	UINT									|   maUInt							|  uint									| 
	ULONG									|   maULong							|  ulong								| 
	FLOAT									|   maFloat							|  float								| 
	DOUBLE									|   maDouble						|  double								| 
	STRING									|   maString						|  string								| 
	ENUM									|   maEnum							|  enum									| 
	REFERENCE								|   maReference						|  reference							| 
	USSTRING								|   maUSString						|  usstring								| 
	COREITEM								|   maCoreItem						|  coreitem								| 
V1.1 ==>
	COREBUFFER								|   maBuffer						|  corebuffer								| 
<== V1.1

	array is a bit more specific. All type of array is serialized using the same type, but C++ class type can be
	all kind of maArray / maVector.
	
	ARRAY									|   xxx								|  array								| 
	
	most common used array are :
	maVect2DF, maVect3DF, maVect4DF.

	
2] XML syntax

	In XML files, attributes are defined like this : 
	
	<Instance Name="InstanceName" Type="InstanceType">
		<CoreModifiableAttribute Type="float" Name="AttributeName" Value="12" Dynamic="false"/>
	</Instance>
	
	or with shorter syntax :
	<Inst N="InstanceName" T="InstanceType">
		<Attr N="AttributeName" V="12"/>
	</Inst>
	
	
	Type is one of the type defined in the array in paragraph 1] it's optional if attribute is not dynamic
	Name is the name used to find the atribute in the attribute list of the CoreModifiable. It must be unique in the class.
	Value is the value to give to the attribute. Array can be initialised with a list of values like this : {0.0,1.0,0.0}
	Dynamic says if the attribute is dynamic or not (optional for not dynamic)
	
V1.2 ==>	
2] Evaluated Init of attributes

	An attribute can be initialised using an evaluation during xml import :
	
	<Attr N="AttributeName" V="eval(12)"/>
	
	Warning: evaluation using other parameters works only if the other parameters are already init (so for previously loaded instances). 

	<Attr N="AttributeName" V="eval(#/GlobalConfig->testValue#)"/>
	
	This behavior is usefull for global configuration file.
	
<== V1.2
V1.1 ==>
3] Specific behaviors

	Some attributes have some specificity :

	3.1] maEnum
	
	maEnum is a template class and must be defined with the number of available enums :
	maEnum<4> myColorMode;		// 4 available color mode
	
	at creation time, you must use strings to specify each enum val :
	myColorMode(*this,true,LABEL_AND_ID(ColorMode),"16","256","256x16","DC")
	
	then, setValue and getValue can be done using strings or int 
	
	int enumValue;
	currentInstance->getValue(LABEL_TO_ID(ColorMode),enumValue); // returns 0 for colorMode "16", 1 for "256", 2 for "256x16" and 3 for "DC"
	
	kstl::string stringEnum;
	currentInstance->getValue(LABEL_TO_ID(ColorMode),stringEnum);
	if(stringEnum == "256x16")
	{
	  // do something
	}

	3.2] maReference
	
	maReference manage a reference (in fact a pointer, no reference counting here) on a RefCountedClass.  
	
	A reference is first search using a string like this :
	
	"typeOfInstance:nameOfInstance"
	
	if no ':' is set in the string, reference is searched only using nameOfInstance with CoreModifiable as the type.
	
	if a getValue is called with a kstl::string output, the same kind of string is returned :
	
	kstl::string	screenname;
	mypCamera->getValue(LABEL_TO_ID(RenderingScreen),screenname); // screenname is something like "RenderingScreen:debugScreen"
	
	if you want to get the instance of the CoreModifiable currently pointed by the maReference, you can call getValue with a CheckUniqueObject parameter :
	
	CheckUniqueObject rs;
	kstl::string	screenname;
	mypCamera->getValue(LABEL_TO_ID(RenderingScreen),rs);
	if((RefCountedClass*)rs)
	{
		screenname=((RefCountedClass*)rs)->getName(); // this time screenname is only "debugScreen"
	}
	
<== V1.1

	3.3] maCoreItem
	
	// TODO
	
	3.4] maBuffer
	
	// TODO
	
	
	
	